# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_database
          POSTGRES_PASSWORD: 123
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v2
      with:
        name: package
        path: staging

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker and Test
    steps:
      - uses: actions/checkout@v1
      - name: Download Maven build artifact
        uses: actions/download-artifact@v1
        with:
          name: package
      - name: Build Docker container
        run: |
          mkdir -p target
          mv artifact/*.jar target
          docker compose up
      - name: Setup Test Env
        run: |
          python -m pip install --upgrade pip
          pip install robotframework
      - name: Run Robot Tests
        run:  ls
      - name: Access secrets
        run: echo "Content of secret - ${{ secrets.DOCKER_HUB_USERNAME }}"
      - name: Push Docker images
        run: echo "Pushing Docker image to Container Registry (e.g. ECR)"
      - name: Deploy application
        run: echo "Deploying application (e.g. Kubernetes)"